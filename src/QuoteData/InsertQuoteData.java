/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package QuoteData;

import Connections.DBConnection;
import Output.QuotePDF;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.TableView;
import javafx.scene.control.Dialog;

/**
 *
 * @author cmeehan
 */
public class InsertQuoteData {

    private boolean insertSuccessful;
    private final int quoteID;
    private final String company, companyID, contactName, contactEmail, contactPhone, contactExtension, contactPhoneType, mtdApproval, spaceApproval, overseasApproval, tlmApproval, tradeLane, pol, pod, tshp, commodityClass, handlingInstructions, commodityDescription, baseOceanFreight, oftUnit, mafiMinimumCharge, baf, bafUnit, eca, ecaUnit, thc, thcUnit, wfg, wfgUnit, doc, docUnit, bookingNumber, declinedReason, internalComments, externalComments, DATE, userID;
    private final boolean accessories, mafiMinimum, bafIncluded, bafPerTariff, ecaIncluded, ecaPerTariff, thcIncluded, thcPerTariff, thcFAS, wfgIncluded, wfgPerTariff, wfgFAS, docIncluded, warRisk, tariffRate, spotRate, contractRate, indicatoryRate, ftfRate, booked, declined;
    private final TableView packingList;
    private final DateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-YYYY HH:mm:ss:SS", Locale.US);

    /**
     *
     * @param quoteID
     * @param customerInformation
     * @param quoteStatus
     * @param portInformation
     * @param commodityInformation
     * @param rateInformation
     * @param rateType
     * @param packingList
     * @param comments
     */
    public InsertQuoteData(int quoteID, String[] customerInformation, String[] quoteStatus, String[] portInformation, List commodityInformation, List rateInformation, List rateType, TableView packingList, String[] comments, String userID) {
        Alert alert = new Alert(AlertType.INFORMATION);
        alert.setTitle("Information Dialog");
        alert.setHeaderText("Look, and information dialog");
        alert.setContentText("I have a great message for you");

        this.userID = userID;

        System.out.println("Call to InsertQuoteData");
        // The current date and time
        Date date = new Date();
        DATE = DATE_FORMAT.format(date);

// The ID generated by the database
        this.quoteID = quoteID;

        // Quoted company information
        this.company = customerInformation[0];
        this.companyID = customerInformation[1];
        this.contactName = customerInformation[2];
        this.contactEmail = customerInformation[3];
        this.contactPhone = customerInformation[4];
        this.contactExtension = customerInformation[5];
        this.contactPhoneType = customerInformation[6];

        // Quote status
        this.mtdApproval = quoteStatus[0];
        this.spaceApproval = quoteStatus[1];
        this.overseasApproval = quoteStatus[2];
        this.tlmApproval = quoteStatus[3];

        // Trade Lane information
        this.tradeLane = portInformation[0];
        this.pol = portInformation[1];
        this.pod = portInformation[2];
        this.tshp = portInformation[3];

        // Commodity Information
        this.commodityClass = commodityInformation.get(0).toString();
        this.handlingInstructions = commodityInformation.get(1).toString();
        this.accessories = (boolean) commodityInformation.get(2);
        this.commodityDescription = commodityInformation.get(3).toString();

        //Rate Information
        this.baseOceanFreight = rateInformation.get(0).toString();
        this.oftUnit = rateInformation.get(1).toString();
        this.mafiMinimum = (boolean) rateInformation.get(2);
        this.mafiMinimumCharge = rateInformation.get(3).toString();
        this.baf = rateInformation.get(4).toString();
        this.bafUnit = rateInformation.get(5).toString();
        this.bafIncluded = (boolean) rateInformation.get(6);
        this.bafPerTariff = (boolean) rateInformation.get(7);
        this.eca = rateInformation.get(8).toString();
        this.ecaUnit = rateInformation.get(9).toString();
        this.ecaIncluded = (boolean) rateInformation.get(10);
        this.ecaPerTariff = (boolean) rateInformation.get(11);
        this.thc = rateInformation.get(12).toString();
        this.thcUnit = rateInformation.get(13).toString();
        this.thcIncluded = (boolean) rateInformation.get(14);
        this.thcPerTariff = (boolean) rateInformation.get(15);
        this.thcFAS = (boolean) rateInformation.get(16);
        this.wfg = rateInformation.get(17).toString();
        this.wfgUnit = rateInformation.get(18).toString();
        this.wfgIncluded = (boolean) rateInformation.get(19);
        this.wfgPerTariff = (boolean) rateInformation.get(20);
        this.wfgFAS = (boolean) rateInformation.get(21);
        this.doc = rateInformation.get(22).toString();
        this.docUnit = rateInformation.get(23).toString();
        this.docIncluded = (boolean) rateInformation.get(24);
        this.warRisk = (boolean) rateInformation.get(25);

        // Rate Type
        this.tariffRate = (boolean) rateInformation.get(26);
        this.spotRate = (boolean) rateInformation.get(26);
        this.contractRate = (boolean) rateInformation.get(26);
        this.indicatoryRate = (boolean) rateInformation.get(26);
        this.ftfRate = (boolean) rateInformation.get(26);
        this.booked = (boolean) rateInformation.get(26);
        this.bookingNumber = rateInformation.get(26).toString();
        this.declined = (boolean) rateInformation.get(26);
        this.declinedReason = rateInformation.get(26).toString();

        // The packing list
        this.packingList = packingList;

        // The comments
        this.internalComments = comments[0];
        this.externalComments = comments[1];

        System.out.println("Call Completed");
        try {
            insertQuote();
        } catch (Exception ex) {
            System.out.println("Error!");
        }

    }

    // Insert the quote data into the quote_data table
    private void insertQuote() throws SQLException {
        String SQL = "INSERT INTO quote_data(QUOTE_ID, QUOTE_VERSION, DATE, USER_ID, COMPANY_NAME, COMPANY_ID, CONTACT_NAME, CONTACT_EMAIL, CONTACT_PHONE, CONTACT_PHONE_EXTENSION, CONTACT_PHONE_TYPE, TRADE_LANE, POL, POL_UNLOC, POL_NAME, POL_COUNTRY, POD, POD_UNLOC, POD_NAME, POD_COUNTRY, FIRST_TRANS_SHIP, FIRST_TRANS_SHIP_UNLOC, FIRST_TRANS_SHIP_NAME, FIRST_TRANS_SHIP_COUNTRY, COMMODITY_CLASS, HANDLING_INSTRUCTIONS, COMMODITY_DESCRIPTION, ACCESSORIES, BASE_FREIGHT, BASE_FREIGHT_UNIT, MAFI_MINIMUM, MAFI_MINIMUM_FREIGHT, MAFI_MINIMUM_UNIT, BAF, BAF_UNIT, BAF_INCLUDED, ECA_BAF, ECA_UNIT,ECA_INCLUDED, THC, THC_UNIT, THC_TARIFF, WFG, WFG_UNIT, WFG_TARIFF, DOCUMENTATION_FEE, DOCUMENTATION_FEE_UNIT, DOCUMENTATION_FEE_INCLUDED, WAR_RISK, TARIFF_FATE, SPOT_RATE, CONTRACT_RATE, INDICATORY_RATE, FTF_RATE, BOOKING, BOOKING_NUMBER, DATE_BOOKED, BOOKED_USER_ID, CARRIER_COMMENTS, INTERNAL_COMMENTS, MTD_APPROVAL, SPACE_APPROVAL, OVERSEAS_RESPONSE, TLM_APPROVAL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

        //Establish connection to the database
        Connection conn = new DBConnection().connect();

        try {
            PreparedStatement ps = conn.prepareStatement(SQL);
            ps.setInt(1, quoteID);
            ps.setString(2, null); // Set the quote version to null on the first insert
            ps.setString(3, DATE);
            ps.setString(4, userID);
            ps.setString(5, company);
            ps.setString(6, companyID);
            ps.setString(7, contactName);
            ps.setString(8, contactEmail);
            ps.setString(9, contactPhone);
            ps.setString(10, contactExtension);
            ps.setString(11, contactPhoneType);
            ps.setString(12, tradeLane);
            ps.setString(13, pol);
            ps.setString(14, null); // POL UNLOC
            ps.setString(15, null); // POL Name
            ps.setString(16, null); // POL Country
            ps.setString(17, pod);
            ps.setString(18, null); // POD UNLOC
            ps.setString(19, null); // POD Name
            ps.setString(20, null); // POD Country
            ps.setString(21, tshp);
            ps.setString(22, null); //Tshp UNLOC
            ps.setString(23, null); // Tshp Name
            ps.setString(24, null); // Tshp Country
            ps.setString(25, commodityClass);
            ps.setString(26, handlingInstructions);
            ps.setString(27, commodityDescription);
            ps.setBoolean(28, accessories);
            ps.setString(29, baseOceanFreight);
            ps.setString(30, oftUnit);
            ps.setBoolean(31, mafiMinimum);
            ps.setString(32, mafiMinimumCharge);
            ps.setString(33, "per MAFI");// Standard minimum
            ps.setString(34, baf);
            ps.setString(35, bafUnit);
            ps.setBoolean(36, bafIncluded);
            ps.setString(37, eca);
            ps.setString(38, ecaUnit);
            ps.setBoolean(39, ecaIncluded);
            ps.setString(40, thc);
            ps.setString(41, thcUnit);
            ps.setBoolean(42, thcIncluded);
            ps.setBoolean(43, thcPerTariff);
            ps.setString(44, wfg);
            ps.setString(45, wfgUnit);
            ps.setBoolean(46, wfgIncluded);
            ps.setBoolean(47, wfgPerTariff);
            ps.setString(48, doc);
            ps.setString(49, docUnit);
            ps.setBoolean(50, docIncluded);
            ps.setBoolean(51, warRisk);
            ps.setBoolean(52, tariffRate);
            ps.setBoolean(53, spotRate);
            ps.setBoolean(54, contractRate);
            ps.setBoolean(55, indicatoryRate);
            ps.setBoolean(56, ftfRate);
            // If the quote is a booking set booked information
            if (booked == true) {
                ps.setBoolean(57, booked);
                ps.setString(58, bookingNumber);
                ps.setString(59, DATE);
                ps.setString(60, userID); // User ID
            } else {
                ps.setBoolean(57, false);
                ps.setString(58, null);
                ps.setString(59, null);
                ps.setString(60, null); // User ID
            }
            
            ps.setString(61, externalComments);
            ps.setString(62, internalComments);
            ps.setString(63, mtdApproval);
            ps.setString(64, spaceApproval);
            ps.setString(65, overseasApproval);
            ps.setString(66, tlmApproval);

            // Set the object insertSuccessful to true if the information was successfully inserted
            insertSuccessful = true;

        } catch (Exception ex) {
            insertSuccessful = false;
            System.out.println("New Quote Error: " + ex.getMessage());
        } finally {
            // Close the connection
            conn.close();

            // Check if the data was inserted successfully
            if (insertSuccessful == true) {
                Boolean pdf = new QuotePDF().newQuote();
                if (pdf == true) {
                    Dialog dialog = new Dialog();
                    dialog.setTitle("New Quote RQS" + quoteID);
                    dialog.setContentText("RQS" + quoteID + " has been successfully created.");
                    dialog.show();
                }
            } else {

            }
        }

    }

    // Insert the packing list into the packing list table
    // Generate the PDF if the quote was successfully inserted
}
